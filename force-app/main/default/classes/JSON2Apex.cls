//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex {

	public class Field {
		public String id {get;set;} 
		public String name {get;set;} 
		public String type {get;set;} 

		public Field(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Field consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String created {get;set;} 
	public Integer updated {get;set;} 
	public String title {get;set;} 
	public String desc_Z {get;set;} // in json: desc
	public String source {get;set;} 
	public String org_type {get;set;} 
	public List<String> org {get;set;} 
	public List<String> sector {get;set;} 
	public String visualizable {get;set;} 
	public String index_name {get;set;} 
	public String catalog_uuid {get;set;} 
	public String status {get;set;} 
	public List<Field> field {get;set;} 
	public String created_date {get;set;} 
	public String updated_date {get;set;} 
	public String active {get;set;} 
	public String external_ws_url {get;set;} 
	public String external_ws {get;set;} 
	public String message {get;set;} 
	public String version {get;set;} 
	public Integer total {get;set;} 
	public Integer count {get;set;} 
	public String limit_Z {get;set;} // in json: limit
	public String offset {get;set;} 
	public List<Records> records {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'created') {
						created = parser.getText();
					} else if (text == 'updated') {
						updated = parser.getIntegerValue();
					} else if (text == 'title') {
						title = parser.getText();
					} else if (text == 'desc') {
						desc_Z = parser.getText();
					} else if (text == 'source') {
						source = parser.getText();
					} else if (text == 'org_type') {
						org_type = parser.getText();
					} else if (text == 'org') {
						org = arrayOfString(parser);
					} else if (text == 'sector') {
						sector = arrayOfString(parser);
					} else if (text == 'visualizable') {
						visualizable = parser.getText();
					} else if (text == 'index_name') {
						index_name = parser.getText();
					} else if (text == 'catalog_uuid') {
						catalog_uuid = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'field') {
						field = arrayOfField(parser);
					} else if (text == 'created_date') {
						created_date = parser.getText();
					} else if (text == 'updated_date') {
						updated_date = parser.getText();
					} else if (text == 'active') {
						active = parser.getText();
					} else if (text == 'external_ws_url') {
						external_ws_url = parser.getText();
					} else if (text == 'external_ws') {
						external_ws = parser.getText();
					} else if (text == 'message') {
						message = parser.getText();
					} else if (text == 'version') {
						version = parser.getText();
					} else if (text == 'total') {
						total = parser.getIntegerValue();
					} else if (text == 'count') {
						count = parser.getIntegerValue();
					} else if (text == 'limit') {
						limit_Z = parser.getText();
					} else if (text == 'offset') {
						offset = parser.getText();
					} else if (text == 'records') {
						records = arrayOfRecords(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Records {
		public String officename {get;set;} 
		public String pincode {get;set;} 
		public String officetype {get;set;} 
		public String deliverystatus {get;set;} 
		public String divisionname {get;set;} 
		public String regionname {get;set;} 
		public String circlename {get;set;} 
		public String taluk {get;set;} 
		public String districtname {get;set;} 
		public String statename {get;set;} 

		public Records(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'officename') {
							officename = parser.getText();
						} else if (text == 'pincode') {
							pincode = parser.getText();
						} else if (text == 'officetype') {
							officetype = parser.getText();
						} else if (text == 'deliverystatus') {
							deliverystatus = parser.getText();
						} else if (text == 'divisionname') {
							divisionname = parser.getText();
						} else if (text == 'regionname') {
							regionname = parser.getText();
						} else if (text == 'circlename') {
							circlename = parser.getText();
						} else if (text == 'taluk') {
							taluk = parser.getText();
						} else if (text == 'districtname') {
							districtname = parser.getText();
						} else if (text == 'statename') {
							statename = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Records consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<JSON2Apex> parse(String json) {
		//System.JSONParser parser = System.JSON.createParser(json);
		//return new JSON2Apex(parser);
        return (List<JSON2Apex>) System.JSON.deserialize(json, List<JSON2Apex>.class);

	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Field> arrayOfField(System.JSONParser p) {
        List<Field> res = new List<Field>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Field(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Records> arrayOfRecords(System.JSONParser p) {
        List<Records> res = new List<Records>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Records(p));
        }
        return res;
    }




}